version: "3.6"
services:
  plex:
    container_name: plex
    image: ghcr.io/linuxserver/plex
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
#      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
#      - NVIDIA_VISIBLE_DEVICES=all
#      - NVIDIA_DRIVER_CAPABILITIES=all
      - PLEX_CLAIM=claim-tvzaAmudgknYGetXifTD
    devices:
      - /dev/dri:/dev/dri
      - /dev/nvidia0
      - /dev/nvidia-uvm
      - /dev/nvidia-uvm-tools
      - /dev/nvidiactl
#    deploy:
#      resources:
#       reservations:
#          devices:
#            - capabilities:
#              - gpu
#              - utility
#              - compute
    dns:
      - 10.20.20.20
      - 1.1.1.1
    volumes:
      - ~/Projects/plex:/config
      - /vz:/vz
      - /dock/1:/dock1
      - /dock/2:/dock2
      - /dock/3:/dock3
      - /dock/4:/dock4
      - /dev/shm/plex:/plexcache
    restart: always
    privileged: yes

#  cuda:
#    image: nvidia/cuda:11.4.2-base-ubuntu20.04
#    command: nvidia-smi
#    runtime: nvidia
#    restart: unless-stopped
#    devices:
#      - /dev/nvidia0
#      - /dev/nvidia-uvm
#      - /dev/nvidia-uvm-tools
#      - /dev/nvidiactl
#    deploy:
#      resources:
#        reservations:
#          devices:
#          - driver: nvidia
#            count: 1
#            capabilities: [gpu, utility, compute]
#
#  jellyfin:
#    image: lscr.io/linuxserver/jellyfin
#    container_name: jellyfin
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Europe/London
#      - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
#    volumes:
#      - ./config:/config
#      - /vz:/vz
#      - /dock/1:/dock1
#      - /dock/2:/dock2
#      - /dock/3:/dock3
#      - /dock/4:/dock4
#      - /opt/vc/lib:/opt/vc/lib #optional
#    ports:
#      - 8096:8096
#      - 8920:8920 #optional
#      - 7359:7359/udp #optional
#      - 1900:1900/udp #optional
#    devices:
#      - /dev/dri:/dev/dri #optional
#      - /dev/vchiq:/dev/vchiq #optional
#      - /dev/video10:/dev/video10 #optional
#      - /dev/video11:/dev/video11 #optional
#      - /dev/video12:/dev/video12 #optional
#    restart: unless-stopped

#  vpn:
#    container_name: vpn
#    image: dperson/openvpn-client:latest
#    cap_add:
#      - net_admin # required to modify network interfaces
#    restart: unless-stopped
#    volumes:
#      - /dev/net:/dev/net:z # tun device
#      - ~/Projects/plex/config/vpn:/vpn # OpenVPN configuration
#    security_opt:
#      - label:disable
#    ports:
#      - 8112:8112 # port for deluge web UI to be reachable from local network
#    command: '-f "" -r 10.99.99.0/24' # enable firewall and route local network traffic

  wireguard:
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - DEBUG=1
      - PUID=1000
      - PGID=1000
      - TZ=US/Arizona
#      - SERVERURL= #optional
#      - SERVERPORT= #optional
#      - PEERS=1 #optional
#      - PEERDNS=auto #optional
#      - INTERNAL_SUBNET=10.9.0.0 #optional
#      - ALLOWEDIPS=10.9.0.5/0 #optional
    volumes:
      - ./config/wireguard/wg0.conf:/config/wg0.conf
      - /lib/modules:/lib/modules
    dns:
      - 10.9.0.1
      - 1.1.1.1
    ports:
      - 8112:8112
      - 51802:51802/udp
    networks:
      mediabr:
        ipv4_address: 10.10.10.10
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    restart: unless-stopped

  deluge:
    container_name: deluge
    image: ghcr.io/linuxserver/deluge:latest
    restart: always
    network_mode: service:wireguard # run on the vpn network
#    networks:
#      mediabr:
#        ipv4_address: 10.10.10.9
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - ./downloads/torrent-blackhole:/blackhole
      - /dock/4/down:/downloads # downloads folder
      - ./config/deluge:/config # config files

  jackett:
    container_name: jackett
    image: ghcr.io/linuxserver/jackett:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./downloads/torrent-blackhole:/downloads # place where to put .torrent files for manual download
      - ./config/jackett:/config # config files

  sonarr:
    container_name: sonarr
    image: ghcr.io/linuxserver/sonarr:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/sonarr:/config # config files
      - /dock/2/TV:/tv1
      - /dock/3/TV2:/tv2
      - /dock/4/TV3:/tv # tv shows folder
      - /dock/4/down:/downloads # download folder

  radarr:
    container_name: radarr
    image: ghcr.io/linuxserver/radarr:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./config/radarr:/config # config files
      - /dock/1/Movies:/movies1
      - /dock/3/Movies2:/movies2
      - /dock/4/Movies3:/movies3
      - /dock/2/4K:/4K
      - /dock/3/4K2:/4K2
      - /dock/4/down:/downloads # download folder
      - /dock/4/Newest:/movies

  prowlarr:
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - ./config/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  organizr:
    image: organizr/organizr
    container_name: organizr
    network_mode: host
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - ./config:/config
#    ports:
#      - 8081:8081
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
#    network_mode: host
    networks:
      mediabr:
        ipv4_address: 10.10.10.100
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 8000:8000
      - 9001:9001
    restart: always

#  grafana:
#    image: grafana/grafana
#    container_name: grafana
#    network_mode: host
#    networks:
#      mediabr:
#        ipv4_address: 10.10.10.200
#    ports:
#      - 3000:3000
#    volumes:
#      - grafana_data:/data
#    user: "104"

volumes:
  portainer_data:
    name: portainer_data

networks:
  mediabr:
    driver: bridge
    ipam:
     config:
       - subnet: 10.10.10.0/24
         gateway: 10.10.10.1
